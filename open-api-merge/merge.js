const fs = require("fs");
const process = require("process");
const YAML = require("yaml");
const { glob } = require("glob");
const { merge, isErrorResult } = require("openapi-merge");
const inputFolder = process.argv[2];

const outputFile = process.argv[3];

(async function () {
    const ymlFiles = await glob(inputFolder + "/*.yml");

    const specs = ymlFiles.sort().map((f) => {
        const file = fs.readFileSync(f).toString();
        const parsed = YAML.parse(file);
        const keys = Object.keys(parsed.paths);

        for (let pathName in parsed.paths) {
            fixRefs(parsed.paths[pathName]);
        }

        for (let modelName in parsed.components.schemas) {
            fixRefs(parsed.components.schemas[modelName]);
        }

        return {
            oas: parsed,
        };
    });

    const mergeResult = merge(specs);
    if (isErrorResult(mergeResult)) {
        // Oops, something went wrong
        console.error(`${mergeResult.message} (${mergeResult.type})`);
    } else {
        console.log(`Merge successful! file written to: ` + outputFile);
        const header = `
# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# !!!!!! WARNING: THIS FILE IS GENERATED !!!!!!
# !!!!!!     DO NOT EDIT THIS FILE       !!!!!!
# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
`;
            fs.writeFileSync(
                outputFile,
                header + YAML.stringify(mergeResult.output)
            );

    }
})();

function stripFilePath(path) {
    return path.replace(/(.*)\.yaml/g, "");
}

/**
 * Modify refs to make the path relative to the current file only
 * @param obj
 */
function fixRefs(obj) {
    if (obj["$ref"]) {
        obj["$ref"] = stripFilePath(obj["$ref"]);
    }

    Object.entries(obj).forEach(([key, value]) => {
        if (typeof value === "object") {
            fixRefs(value);
        }
        if (Array.isArray(value)) {
            value.forEach((v) => {
                if (typeof v === "object") {
                    fixRefs(v);
                }
            });
        }
    });
}
